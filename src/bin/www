#!/usr/bin/env node

/**
 * Module dependencies.
 */
/* eslint-disable */
var app = require('../app');
var debug = require('debug')('wisnuc-drop:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var config = require('getconfig')

var port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * socket.io 
 */
var io = require('socket.io')(server)
require('../lib/socketIO')(io)

// ####################### session #########################
// FIXME: delete session
var session = require('express-session')({
    secret: 'wisnuc-drop',
    resave: true,
    saveUninitialized: true
});

// TODO: 更改 session
var sharedsession = require('express-socket.io-session');

// Use express-session middleware for express
app.use(session);

// Use shared session middleware for socket.io
// setting autoSave:true
io.use(sharedsession(session, {
    autoSave: true
}));
// ####################### session #########################

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;

    console.info('Listening on ' + bind);
    debug('Listening on ' + bind);
}

// FIXME: deal with Unhandled rejection Error
