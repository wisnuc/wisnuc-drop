#!/usr/bin/env node

/**
 * Module dependencies.
 * TODO: use cluster
 * sokcet.io in master process, not apply to load balance
 * socket.io 仅存在主进程，使用公网～
 * cloud 存在内网，使用 worker～
 * cloud 与 socket 进程通信，走异步通信机制！
 * 项目相当于 socket 与 cloud 两部分结合
 */

/* eslint-disable */
var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');

var logger = Logger(__filename)
var config = require('getconfig')
var port = config.port

app.set('port', config.port)
var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;

  debug('Listening on ' + bind);
}

// catch global error
process.on('uncaughtException', function (err) {
  debug('uncaught exception: ', err);
  logger.error('uncaught exception: ', err)
})
